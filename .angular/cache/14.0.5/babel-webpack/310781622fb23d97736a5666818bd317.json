{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { FormControl, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { NavController, LoadingController, ToastController, Platform, ModalController, AlertController } from '@ionic/angular';\nimport { ServiceService } from '../services/service.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@ionic/angular\";\nimport * as i3 from \"../services/service.service\";\nexport let RegisterPage = /*#__PURE__*/(() => {\n  class RegisterPage {\n    constructor(formBuilder, navCtrl, loadingController, platform, toastController, alertController, modalController, serviceService) {\n      this.formBuilder = formBuilder;\n      this.navCtrl = navCtrl;\n      this.loadingController = loadingController;\n      this.platform = platform;\n      this.toastController = toastController;\n      this.alertController = alertController;\n      this.modalController = modalController;\n      this.serviceService = serviceService;\n      this.validations = {\n        'Username': [{\n          type: 'required',\n          message: 'Username harus diisi.'\n        }, {\n          type: 'validUsername',\n          message: 'Username sudah terdaftar.'\n        }],\n        'Password': [{\n          type: 'required',\n          message: 'Password harus diisi.'\n        }, {\n          type: 'minlength',\n          message: 'Password minimal harus 5 karakter.'\n        }, {\n          type: 'pattern',\n          message: 'Password harus mengandung huruf (baik huruf besar dan kecil) dan angka.'\n        }],\n        'NamaLengkap': [{\n          type: 'required',\n          message: 'Nama lengkap harus diisi.'\n        }],\n        'Email': [{\n          type: 'required',\n          message: 'Email harus diisi.'\n        }, {\n          type: 'pattern',\n          message: 'Email tidak valid.'\n        }],\n        'NoHp': [{\n          type: 'required',\n          message: 'No Hp harus diisi.'\n        }, {\n          type: 'minlength',\n          message: 'No Hp minimal harus 10 karakter.'\n        }, {\n          type: 'maxlength',\n          message: 'No Hp maksimal harus 15 karakter.'\n        }]\n      };\n    }\n\n    ngOnInit() {\n      this.FormRegister = this.formBuilder.group({\n        Username: new FormControl('', Validators.compose([Validators.required])),\n        Password: new FormControl('', Validators.compose([Validators.required, Validators.minLength(5) // Validators.pattern('^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9]+$')\n        ])),\n        NamaLengkap: new FormControl('', Validators.compose([Validators.required])),\n        Email: new FormControl('', Validators.compose([Validators.required, Validators.pattern('^[\\\\w]+(?:\\\\.[\\\\w])*@(?:[a-zA-Z0-9-]+\\\\.)+[a-zA-Z]{2,6}$')])),\n        NoHp: new FormControl('', Validators.compose([Validators.required, Validators.minLength(10), Validators.maxLength(15)]))\n      });\n    }\n\n    Register() {\n      return __awaiter(this, void 0, void 0, function* () {\n        //menampilkan loading\n        const loading = yield this.loadingController.create({\n          message: 'Please wait...'\n        });\n        yield loading.present(); //panggil fungsi register di service\n\n        this.serviceService.RegisterApi(this.FormRegister.value, 'register').subscribe(data => {\n          this.ResponseRegister = data; //cek apakah register berhasil atau tidak\n\n          if (this.ResponseRegister.status == \"error\") {\n            this.AlertRegister(\"Pendaftaran user tidak berhasil, silahkan coba lagi.\");\n            loading.dismiss();\n          } else {\n            loading.dismiss();\n            this.modalController.dismiss();\n          }\n\n          loading.dismiss();\n        }, error => {\n          loading.dismiss();\n        });\n      });\n    }\n\n    dismissRegister() {\n      this.modalController.dismiss();\n    }\n\n    AlertRegister(Message) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const alert = yield this.alertController.create({\n          header: 'Peringatan!',\n          //subHeader: 'Subtitle',\n          message: Message,\n          buttons: ['OK']\n        });\n        yield alert.present();\n      });\n    }\n\n  }\n\n  RegisterPage.ɵfac = function RegisterPage_Factory(t) {\n    return new (t || RegisterPage)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.NavController), i0.ɵɵdirectiveInject(i2.LoadingController), i0.ɵɵdirectiveInject(i2.Platform), i0.ɵɵdirectiveInject(i2.ToastController), i0.ɵɵdirectiveInject(i2.AlertController), i0.ɵɵdirectiveInject(i2.ModalController), i0.ɵɵdirectiveInject(i3.ServiceService));\n  };\n\n  RegisterPage.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: RegisterPage,\n    selectors: [[\"app-register\"]],\n    decls: 0,\n    vars: 0,\n    template: function RegisterPage_Template(rf, ctx) {},\n    styles: [\"ion-item[_ngcontent-%COMP%]{border-radius:10px!important;font-size:.9em;margin-bottom:4px;border:1px solid rgba(34,34,34,.096);border-bottom:0px!important;background-color:#fff;box-shadow:4px 4px 6px -6px #222}.error-container[_ngcontent-%COMP%]{color:red;font-size:.8em}\"]\n  });\n  return RegisterPage;\n})();","map":null,"metadata":{},"sourceType":"module"}