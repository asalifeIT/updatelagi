{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { LoadingController, AlertController, ToastController, NavController, MenuController } from '@ionic/angular';\nimport { Router } from '@angular/router';\nimport Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/angular\";\nimport * as i2 from \"@angular/router\";\nexport let UtilService = /*#__PURE__*/(() => {\n  class UtilService {\n    constructor(loadingCtrl, alertCtrl, toastCtrl, router, navCtrl, menuController) {\n      this.loadingCtrl = loadingCtrl;\n      this.alertCtrl = alertCtrl;\n      this.toastCtrl = toastCtrl;\n      this.router = router;\n      this.navCtrl = navCtrl;\n      this.menuController = menuController;\n      this.isLoading = false;\n    }\n\n    openSideMenu() {\n      this.menuController.open();\n    }\n\n    disableSideMenu() {\n      this.menuController.swipeGesture(false);\n      this.menuController.enable(false);\n    }\n\n    enableSideMenu() {\n      this.menuController.swipeGesture(true);\n      this.menuController.enable(true);\n    }\n    /*\r\n    Start Loader\r\n    Call this method to Start your Loader\r\n    */\n\n\n    show() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.isLoading = true;\n        return yield this.loadingCtrl.create({\n          // duration: 5000,\n          spinner: 'dots'\n        }).then(a => {\n          a.present().then(() => {\n            console.log('presented');\n\n            if (!this.isLoading) {\n              a.dismiss().then(() => console.log('abort presenting'));\n            }\n          });\n        });\n      });\n    }\n\n    success_msg(title) {\n      Swal.fire({\n        icon: 'success',\n        title: title,\n        showConfirmButton: false,\n        timer: 1500\n      });\n    }\n\n    hide() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.isLoading = false;\n        return yield this.loadingCtrl.dismiss().then(() => console.log('dismissed'));\n      });\n    }\n    /*\r\n      Show Warning Alert Message\r\n      param : msg = message to display\r\n      Call this method to show Warning Alert,\r\n      */\n\n\n    showWarningAlert(msg) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const alert = yield this.alertCtrl.create({\n          header: 'Warning',\n          message: msg,\n          buttons: ['ok']\n        });\n        yield alert.present();\n      });\n    }\n\n    showSimpleAlert(msg) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const alert = yield this.alertCtrl.create({\n          header: 'warning',\n          message: msg,\n          buttons: ['ok']\n        });\n        yield alert.present();\n      });\n    }\n    /*\r\n     Show Error Alert Message\r\n     param : msg = message to display\r\n     Call this method to show Error Alert,\r\n     */\n\n\n    showErrorAlert(msg) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const alert = yield this.alertCtrl.create({\n          header: 'Error',\n          message: msg,\n          buttons: ['ok']\n        });\n        yield alert.present();\n      });\n    }\n    /*\r\n       param : email = email to verify\r\n       Call this method to get verify email\r\n       */\n\n\n    getEmailFilter(email) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const emailfilter = /^[\\w._-]+[+]?[\\w._-]+@[\\w.-]+\\.[a-zA-Z]{2,6}$/;\n\n        if (!emailfilter.test(email)) {\n          const alert = yield this.alertCtrl.create({\n            header: 'warning',\n            message: 'Please enter valid email',\n            buttons: ['ok']\n          });\n          yield alert.present();\n          return false;\n        } else {\n          return true;\n        }\n      });\n    }\n    /*\r\n      Show Toast Message on Screen\r\n       param : msg = message to display, color= background\r\n        color of toast example dark,danger,light. position  = position of message example top,bottom\r\n       Call this method to show toast message\r\n       */\n\n\n    showToast(msg, color, positon) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const toast = yield this.toastCtrl.create({\n          message: msg,\n          duration: 2000,\n          color: color,\n          position: positon\n        });\n        toast.present();\n      });\n    }\n\n    errorToast(msg, color) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const toast = yield this.toastCtrl.create({\n          message: msg,\n          duration: 2000,\n          color: color ? 'dark' : 'light'\n        });\n        toast.present();\n      });\n    }\n\n    apiErrorHandler(err) {\n      console.log('error', err);\n    }\n\n  }\n\n  UtilService.ɵfac = function UtilService_Factory(t) {\n    return new (t || UtilService)(i0.ɵɵinject(i1.LoadingController), i0.ɵɵinject(i1.AlertController), i0.ɵɵinject(i1.ToastController), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i1.NavController), i0.ɵɵinject(i1.MenuController));\n  };\n\n  UtilService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UtilService,\n    factory: UtilService.ɵfac,\n    providedIn: 'root'\n  });\n  return UtilService;\n})();","map":null,"metadata":{},"sourceType":"module"}