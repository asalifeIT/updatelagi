{"ast":null,"code":"import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { tap, timeout } from 'rxjs/operators';\nimport { ReplaySubject } from 'rxjs';\nimport { Platform, ToastController } from '@ionic/angular';\nimport { catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@ionic/angular\";\nexport let ServiceService = /*#__PURE__*/(() => {\n  class ServiceService {\n    constructor(http, platform, toastController) {\n      this.http = http;\n      this.platform = platform;\n      this.toastController = toastController;\n      this.authenticationState = new ReplaySubject();\n      this.API_URL = \"http://asabeta.com:8080/api/\";\n      this.TOKEN_KEY = 'accesstoken';\n      this.REFRESH_TOKEN_KEY = 'refreshtoken';\n      this.ROLE = 'role';\n      this.featuresApp = [{\n        'feature': 'CATERING',\n        'sections': [{\n          'section': 'COMPLAINT',\n          'actions': [{\n            'action': 'VIEW',\n            'hasAccess': ['ROLE_MT', 'ROLE_HK', 'ROLE_SPV', 'ROLE_GS', 'ROLE_PROG', 'ROLE_HCGS']\n          }, {\n            'action': 'ADD',\n            'hasAccess': ['ROLE_CUS', 'ROLE_SPV', 'ROLE_GS', 'ROLE_PROG', 'ROLE_HCGS']\n          }, {\n            'action': 'EDIT',\n            'hasAccess': ['ROLE_PROG', 'ROLE_HCGS']\n          }]\n        }, {\n          'section': 'RATING',\n          'actions': [{\n            'action': 'VIEW',\n            'hasAccess': ['ROLE_MT', 'ROLE_HK', 'ROLE_SPV', 'ROLE_GS', 'ROLE_PROG', 'ROLE_HCGS']\n          }, {\n            'action': 'ADD',\n            'hasAccess': ['ROLE_CUS', 'ROLE_GS', 'ROLE_PROG', 'ROLE_HCGS']\n          }]\n        }]\n      }, {\n        'feature': 'HOUSEKEEPING',\n        'sections': [{\n          'section': 'COMPLAINT',\n          'actions': [{\n            'action': 'VIEW',\n            'hasAccess': ['ROLE_MT', 'ROLE_HK', 'ROLE_SPV', 'ROLE_GS', 'ROLE_PROG', 'ROLE_HCGS']\n          }, {\n            'action': 'ADD',\n            'hasAccess': ['ROLE_CUS', 'ROLE_SPV', 'ROLE_GS', 'ROLE_PROG', 'ROLE_HCGS']\n          }, {\n            'action': 'EDIT',\n            'hasAccess': ['ROLE_SPV', 'ROLE_GS', 'ROLE_PROG', 'ROLE_HCGS']\n          }]\n        }, {\n          'section': 'TASK',\n          'actions': [{\n            'action': 'VIEW',\n            'hasAccess': ['ROLE_HK', 'ROLE_SPV', 'ROLE_GS', 'ROLE_PROG', 'ROLE_HCGS']\n          }, {\n            'action': 'ADD',\n            'hasAccess': ['ROLE_HK', 'ROLE_PROG', 'ROLE_HCGS']\n          }, {\n            'action': 'EDIT',\n            'hasAccess': ['ROLE_SPV', 'ROLE_GS', 'ROLE_PROG', 'ROLE_HCGS']\n          }]\n        }]\n      }, {\n        'feature': 'LAUNDRY',\n        'sections': [{\n          'section': 'COMPLAINT',\n          'actions': [{\n            'action': 'VIEW',\n            'hasAccess': ['ROLE_MT', 'ROLE_HK', 'ROLE_SPV', 'ROLE_GS', 'ROLE_PROG', 'ROLE_HCGS']\n          }, {\n            'action': 'ADD',\n            'hasAccess': ['ROLE_CUS', 'ROLE_SPV', 'ROLE_GS', 'ROLE_PROG', 'ROLE_HCGS']\n          }, {\n            'action': 'EDIT',\n            'hasAccess': ['ROLE_SPV', 'ROLE_GS', 'ROLE_PROG', 'ROLE_HCGS']\n          }]\n        }]\n      }, {\n        'feature': 'MAINTENANCE',\n        'sections': [{\n          'section': 'COMPLAINT',\n          'actions': [{\n            'action': 'VIEW',\n            'hasAccess': ['ROLE_MT', 'ROLE_HK', 'ROLE_GS', 'ROLE_PROG', 'ROLE_HCGS']\n          }, {\n            'action': 'ADD',\n            'hasAccess': ['ROLE_CUS', 'ROLE_SPV', 'ROLE_GS', 'ROLE_PROG', 'ROLE_HCGS']\n          }, {\n            'action': 'EDIT',\n            'hasAccess': ['ROLE_MT', 'ROLE_GS', 'ROLE_PROG', 'ROLE_HCGS']\n          }]\n        }, {\n          'section': 'TASK',\n          'actions': [{\n            'action': 'VIEW',\n            'hasAccess': ['ROLE_MT', 'ROLE_GS', 'ROLE_PROG', 'ROLE_HCGS']\n          }, {\n            'action': 'ADD',\n            'hasAccess': ['ROLE_MT', 'ROLE_PROG', 'ROLE_HCGS']\n          }, {\n            'action': 'EDIT',\n            'hasAccess': ['ROLE_GS', 'ROLE_PROG', 'ROLE_HCGS']\n          }]\n        }]\n      }];\n      this.platform.ready().then(() => {\n        this.checkToken();\n      });\n    }\n\n    options(arg0, options) {\n      throw new Error('Method not implemented.');\n    } //jika token tidak ada maka authenticationState=false\n    //jika token ada maka akan memanggil fungsi cekUser\n\n\n    checkToken() {\n      if (localStorage.getItem(this.TOKEN_KEY) == null || localStorage.getItem(this.TOKEN_KEY) == '') {\n        this.authenticationState.next(false);\n      } else {\n        this.CekUser().subscribe(data => {\n          this.DataCheckLogin = data;\n\n          if (this.DataCheckLogin.status == \"success\") {\n            this.authenticationState.next(true);\n          } else {\n            this.authenticationState.next(false);\n          }\n        }, err => {\n          this.authenticationState.next(false);\n        });\n      }\n    } //cek user di sisi client\n\n\n    CekUser() {\n      //ambil data dari localstorage\n      let dataStorage = JSON.parse(localStorage.getItem(this.TOKEN_KEY));\n      this.token = dataStorage; // console.log(\"token : \" + this.token);\n\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': \"Bearer \" + this.token\n      });\n      return this.http.get(this.API_URL + 'users/my', {\n        headers: headers,\n        observe: 'response'\n      }).pipe(timeout(8000), tap(Data => {\n        return Data;\n      }));\n    } //login\n\n\n    loginApi(credentials, type) {\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n      return this.http.post(this.API_URL + type, credentials, {\n        headers: headers,\n        observe: 'response'\n      }).pipe(tap(Data => {\n        this.DataLogin = Data.body;\n\n        if (Data.status == 200) {\n          localStorage.setItem(this.TOKEN_KEY, JSON.stringify(this.DataLogin.access_token));\n          localStorage.setItem(this.REFRESH_TOKEN_KEY, JSON.stringify(this.DataLogin.refresh_token));\n          localStorage.setItem(this.ROLE, JSON.stringify(this.DataLogin.roles[1]));\n          localStorage.setItem(\"user\", JSON.stringify(this.DataLogin));\n          localStorage.setItem(\"roles\", JSON.stringify(this.DataLogin.roles));\n          this.authenticationState.next(true);\n        } else {\n          this.authenticationState.next(false);\n        }\n\n        return Data;\n      }), catchError((err, caught) => {\n        let message = \"error\";\n\n        if (err.status == 404) {\n          message = 'User belum terdaftar. Silahkan hubungi admin.';\n        } else if (err.status == 401) {\n          message = 'NRP dan kata sandi tidak cocok. Silahkan coba lagi.';\n        } else {\n          message = 'Tidak ada koneksi internet. Silakan periksa koneksi Anda.';\n        }\n\n        return throwError(message);\n      }));\n    } //register\n\n\n    RegisterApi(credentials, type) {\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n      return this.http.post(this.API_URL + type, credentials, {\n        headers: headers\n      }).pipe(tap(Data => {\n        this.DataLogin = Data;\n\n        if (this.DataLogin.status == \"success\") {\n          localStorage.setItem(this.TOKEN_KEY, JSON.stringify(Data));\n          this.authenticationState.next(true);\n        } else {\n          this.authenticationState.next(false);\n        }\n\n        return Data;\n      }));\n    }\n\n    submitaduan(form, url) {\n      let dataStorage = JSON.parse(localStorage.getItem(this.TOKEN_KEY));\n      this.token = dataStorage;\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': \"Bearer \" + this.token\n      });\n      return this.http.post(this.API_URL + url, form, {\n        headers: headers,\n        observe: 'response'\n      }).pipe(tap(Data => {\n        this.DataLogin = Data;\n        let message = 'Data Anda terkirim.';\n        return message;\n      }), catchError(err => {\n        let message = \"Gagal Terkirim, Mohon Data Diisi Lengkap!\";\n        return throwError(err);\n      }));\n    }\n\n    getRecord(url) {\n      let dataStorage = JSON.parse(localStorage.getItem(this.TOKEN_KEY));\n      this.token = dataStorage;\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': \"Bearer \" + this.token\n      });\n      return this.http.get(this.API_URL + url, {\n        headers: headers,\n        observe: 'response'\n      }).pipe(tap(Data => {\n        this.DataRecord = Data.body;\n        let message = 'Koneksi APi Berhasil!';\n        return message;\n      }), catchError((err, caught) => {\n        let message = \"Gagal Koneksi API!\";\n        return throwError(message);\n      }));\n    }\n\n    getRecord2(url) {\n      let dataStorage = JSON.parse(localStorage.getItem(this.TOKEN_KEY));\n      this.token = dataStorage;\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': \"Bearer \" + this.token\n      });\n      return this.http.get(this.API_URL + url, {\n        headers: headers,\n        observe: 'response'\n      }).pipe(tap(Data => {\n        this.DataRecord2 = Data.body;\n        let message = 'Koneksi APi Berhasil!';\n        return message;\n      }), catchError((err, caught) => {\n        let message = \"Gagal Koneksi API!\";\n        return throwError(message);\n      }));\n    }\n\n    updateaduan(form, url) {\n      let dataStorage = JSON.parse(localStorage.getItem(this.TOKEN_KEY));\n      this.token = dataStorage;\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': \"Bearer \" + this.token\n      });\n      return this.http.put(this.API_URL + url, form, {\n        headers: headers,\n        observe: 'response'\n      }).pipe(tap(Data => {\n        this.DataResponse = Data;\n        let message = 'Data Anda terupdate.';\n        return message;\n      }), catchError(err => {\n        let message = \"Gagal update! \";\n        return throwError(err);\n      }));\n    } //logout\n\n\n    signout() {\n      this.authenticationState.next(false);\n    }\n\n    updateStatus(form, url, id) {\n      let dataStorage = JSON.parse(localStorage.getItem(this.TOKEN_KEY));\n      this.token = dataStorage;\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': \"Bearer \" + this.token\n      });\n      return this.http.put(this.API_URL + url + id, form, {\n        headers: headers,\n        observe: 'response'\n      }).pipe(tap(Data => {\n        this.DataLogin = Data;\n        let message = 'Data Anda terkirim.';\n        return message;\n      }), catchError(err => {\n        let message = \"Gagal Terkirim, Mohon Data Diisi Lengkap!\";\n        return throwError(err);\n      }));\n    }\n\n    getUserName() {\n      if (localStorage.getItem('user') !== null) {\n        const user = JSON.parse(localStorage.getItem('user'));\n        return user.user.name;\n      } else return 'User';\n    }\n\n    isHasAccessDashboard() {\n      const user = JSON.parse(localStorage.getItem('user'));\n      const roleUser = user.roles[2];\n      return roleUser !== 'ROLE_CUS';\n    }\n\n    isHasAccess(_feature, _section, _action) {\n      const user = JSON.parse(localStorage.getItem('user'));\n      const roleUser = user.roles[2];\n      let feature = this.featuresApp.find(e => e.feature === _feature);\n      if (feature == null) return false;\n      let section = feature.sections.find(e => e.section === _section);\n      if (section == null) return false;\n      let action = section.actions.find(e => e.action === _action);\n      if (action == null) return false;\n      return !!action.hasAccess.find(item => JSON.stringify(item) === JSON.stringify(roleUser));\n    }\n\n  }\n\n  ServiceService.ɵfac = function ServiceService_Factory(t) {\n    return new (t || ServiceService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Platform), i0.ɵɵinject(i2.ToastController));\n  };\n\n  ServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ServiceService,\n    factory: ServiceService.ɵfac,\n    providedIn: 'root'\n  });\n  return ServiceService;\n})();","map":null,"metadata":{},"sourceType":"module"}